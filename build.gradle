buildscript {
	repositories {
		mavenCentral()
		google()
		maven { url "https://repo.spring.io/plugins-release-local" }
	}
	dependencies {
		classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.7')
		classpath('org.asciidoctor:asciidoctor-java-integration:0.1.4')
		classpath('me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1')
		classpath ('com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3')
	}
}
plugins {
	id 'org.asciidoctor.jvm.base' version '2.1.0'
	id 'org.asciidoctor.jvm.convert' version '2.1.0'
	id 'nebula.optional-base' version '3.0.3'
}

// Set up different subproject lists for individual configuration
ext.javaProjects = subprojects.findAll { project -> project.name != 'docs' && project.name != 'manual' }
ext.docProjects = subprojects.findAll { project -> project.name == 'docs' || project.name == 'manual' }
ext.coreModuleProjects = javaProjects

configure(allprojects) {
	group = "org.springframework.sync"

	ext.springVersion            = "5.3.22"
	ext.springReleaseVersion     = "latest.release"
	ext.springSnapshotVersion    = "latest.integration"
	ext.springAndroidVersion     = "1.0.1.RELEASE"
	ext.commonsLangVersion       = "3.12.0"
	ext.diffUtilsVersion         = "1.3.0"
	ext.slf4jVersion             = "2.0.0"
	ext.jacksonVersion           = "2.13.3"
	ext.springDataRedisVersion   = "2.7.2"
	ext.springDataGeodeVersion   = "2.7.2"
	ext.springDataCommonsVersion = "2.7.2"
	ext.springDataJpaVersion     = "2.7.2"
	ext.jsonPathVersion          = "2.7.0"
	ext.junitVersion             = "4.13.2"
	ext.easymockVersion          = "4.3"
	ext.hamcrestVersion          = "1.3"
	ext.servletApiVersion        = "4.0.1"
	ext.lombokVersion            = "1.18.24"
	ext.hibernateVersion         = "5.6.11.Final"
	ext.h2Version                = "2.1.214"

	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "javadocHotfix"
	apply plugin: 'nebula.optional-base'

	compileJava {
		sourceCompatibility=17
		targetCompatibility=17
	}
	compileTestJava {
		sourceCompatibility=17
		targetCompatibility=17
	}

	[compileJava, compileTestJava]*.options*.compilerArgs = [
		"--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
		"--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
		"--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
		"--add-opens=java.base/java.io=ALL-UNNAMED",
		"--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED",
		"-Xlint:serial",
		"-Xlint:varargs",
		"-Xlint:cast",
		"-Xlint:classfile",
		"-Xlint:dep-ann",
		"-Xlint:divzero",
		"-Xlint:empty",
		"-Xlint:finally",
		"-Xlint:overrides",
		"-Xlint:path",
		"-Xlint:processing",
		"-Xlint:static",
		"-Xlint:try",
		"-Xlint:fallthrough",
		"-Xlint:rawtypes",
		"-Xlint:deprecation",
		"-Xlint:unchecked",
		"-Xlint:-options",
//		"-Werror"
	]

	sourceSets.test.resources.srcDirs = [
		"src/test/resources",
		"src/test/java"
	]

	tasks.withType(Test).all {
		systemProperty("java.awt.headless", "true")
	}

	repositories {
		mavenCentral()
		google()
		maven { url "https://repo.spring.io/plugins-release-local" }
	}

	dependencies {
		implementation("org.projectlombok:lombok:${lombokVersion}")
		annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
		testImplementation("org.springframework:spring-test:${springVersion}")
		testImplementation("junit:junit:${junitVersion}")
		testImplementation("org.hamcrest:hamcrest-all:${hamcrestVersion}")
		testImplementation("org.easymock:easymock:${easymockVersion}")
		testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	}

	ext.javadocLinks = [
		"https://docs.oracle.com/en/java/javase/17/docs/api/",
		"http://docs.spring.io/spring/docs/${springVersion}/javadoc-api/"
	] as String[]

	// servlet-api (2.5) and tomcat-servlet-api (3.0) classpath entries should not be
	// exported to dependent projects in Eclipse to avoid false compilation errors due
	// to changing APIs across these versions
	eclipse.classpath.file.whenMerged { classpath ->
		classpath.entries.findAll { entry -> entry.path.contains("servlet-api") }*.exported = false
	}
}

project('spring-sync-core') {
	repositories {
		mavenCentral()
		google()
		maven { url "https://repo.spring.io/plugins-release-local" }
	}
	description = "Spring Differential Synchronization and JSON Patch"
	dependencies {
		implementation("org.springframework:spring-core:${springVersion}")
		implementation("org.springframework:spring-expression:${springVersion}")
		implementation("org.apache.commons:commons-lang3:${commonsLangVersion}")
		implementation("com.googlecode.java-diff-utils:diffutils:${diffUtilsVersion}")
		implementation("org.slf4j:slf4j-api:${slf4jVersion}")
		implementation "org.springframework.data:spring-data-redis:${springDataRedisVersion}", optional
		implementation "org.springframework.data:spring-data-geode:${springDataGeodeVersion}", optional
		implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}", optional
		testImplementation("com.jayway.jsonpath:json-path:${jsonPathVersion}")
		testImplementation("com.jayway.jsonpath:json-path-assert:${jsonPathVersion}")
	}
}

project('spring-sync-config') {
	repositories {
		mavenCentral()
		google()
		maven { url "https://repo.spring.io/plugins-release-local" }
	}
	description = "Spring Sync Configuration"
	dependencies {
		implementation(project(":spring-sync-core"))
		implementation(project(":spring-sync-web"))
		implementation("org.springframework:spring-core:${springVersion}")
		implementation("org.springframework:spring-context:${springVersion}")
		implementation("org.springframework:spring-webmvc:${springVersion}")
		implementation "javax.servlet:javax.servlet-api:${servletApiVersion}", optional
	}
}

project('spring-sync-core-android') {
	repositories {
		mavenCentral()
		google()
		maven { url "https://repo.spring.io/plugins-release-local" }
	}

	description = "Spring Differential Synchronization and JSON Patch for Android"

	// creates a separate artifact for Android which builds against different dependencies

	sourceSets {
		main {
			java {
				srcDir '../spring-sync-core/src/main/java'
				exclude 'org/springframework/sync/diffsync/shadowstore/Redis**'
				exclude 'org/springframework/sync/diffsync/shadowstore/Gem**'
			}
		}
	}

	dependencies {
		implementation("org.springframework.android:spring-android-core:${springAndroidVersion}")
		implementation("org.springframework:spring-expression:${springVersion}") {
			// exclude in favor of Spring for Android Core
			exclude group: "org.springframework", module: "spring-core"
		}
		implementation("org.apache.commons:commons-lang3:${commonsLangVersion}")
		implementation("com.googlecode.java-diff-utils:diffutils:${diffUtilsVersion}")
		implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}", optional
	}
}

project('spring-sync-web') {
	repositories {
		mavenCentral()
		google()
		maven { url "https://repo.spring.io/plugins-release-local" }
	}

	description = "Spring Differential Synchronization and JSON Patch"
	dependencies {
		implementation(project(":spring-sync-core"))
		implementation("org.springframework:spring-webmvc:${springVersion}")
		implementation "javax.servlet:javax.servlet-api:${servletApiVersion}", optional
		implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}", optional
		testImplementation("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
		testImplementation("com.h2database:h2:${h2Version}")
		testImplementation("org.springframework.data:spring-data-commons:${springDataCommonsVersion}")
		testImplementation("org.springframework.data:spring-data-jpa:${springDataJpaVersion}")
		testImplementation("org.springframework:spring-orm:${springVersion}")
		testImplementation("com.jayway.jsonpath:json-path:${jsonPathVersion}")
		testImplementation("com.jayway.jsonpath:json-path-assert:${jsonPathVersion}")
	}
}

configure(rootProject) {
	description = "Spring Sync Ws"

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	dependencies {
		// for integration tests
	}

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.overview = "src/api/overview.html"
		options.links(project.ext.javadocLinks)
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")
	}

// Task for creating the distro zip

task dist(type: Zip) {
	dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' || task.name.endsWith('Zip') || task.name.endsWith('generatePom') }
	classifier = 'dist'

	evaluationDependsOn(':docs')
	evaluationDependsOn(':docs:manual')

	def zipRootDir = "${project.name}-$version"
	into(zipRootDir) {
		from(rootDir) {
			include '*.txt'
		}
		into('docs') {
			with(project(':docs').apiSpec)
			with(project(':docs:manual').spec)
		}
		into('dist') {
			from coreModuleProjects.collect {project -> project.libsDirectory }
		}
	}
}

artifacts {
	archives dist
	archives project(':docs').docsZip
}
}
